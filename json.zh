namespace JSON
{
	enum Type
	{
		JS_None,
		JS_String,
		JS_Array,
		JS_Object,
		JS_KV,
		JS_Value,
		JS_NumTypes
	};
	class JSONRef
	{
		char32 strptr;
		int start;
		int end;
		Type type;
		Type listtype;

		JSONRef();
		JSONRef(char32 str) {from(str);}
		JSONRef(JSONRef other)
		{
			from(other);
		}
		void from(JSONRef other)
		{
			strptr = other->strptr;
			start = other->start;
			end = other->end;
			listtype = other->listtype;
			type = other->type;
		}
		void from(char32 newstr)
		{
			if(newstr[-1])
			{
				ResizeArray(newstr, SizeOfArray(newstr)+1);
				newstr[-1] = 0;
			}
			strptr = newstr;
			start = 0;
			end = strlen(newstr);
			listtype = JS_None;
			if(start == end)
				type = JS_None;
			else switch(strptr[end-1])
			{
				case ']':
					type = JS_Array;
					break;
				case '}':
					type = JS_Object;
					break;
				case '"':
					type = JS_String;
					break;
				default:
					type = JS_Value;
					break;
			}
		}
		void get(char32 buf)
		{
			if(end <= start || !IsValidArray(strptr))
			{
				ResizeArray(buf, 1);
				buf[-1] = 0;
				return;
			}
			ResizeArray(buf, end-start+1);
			for(int q = 0; q < end-start && strptr[q]; ++q)
				buf[q] = strptr[q+start];
			buf[-1] = 0;
		}
		void get_trim(char32 buf)
		{
			get(buf);
			if(buf[0] == '"' && buf[-2] == '"')
			{
				ArrayPopBack(buf);
				ArrayPopFront(buf);
				buf[-1] = 0;
			}
		}
		void get_kv(char32 keybuf, char32 valbuf, bool trim_val = false)
		{
			int _start = start, _end = end;
			bool quoted = false;
			bool val_mode = false;
			if(keybuf)
				ResizeArray(keybuf,0);
			if(valbuf)
				ResizeArray(valbuf,0);
			for(int q = _start; q < _end; ++q)
			{
				bool in_quotes = quoted;
				if(strptr[q] == '"')
				{
					quoted = !quoted;
					in_quotes = false;
				}
				if(val_mode)
				{
					if(trim_val && strptr[q] == '"' && !in_quotes)
						continue;
					if(valbuf)
						ArrayPushBack(valbuf, strptr[q]);
					continue;
				}
				else if(in_quotes)
				{
					if(keybuf)
						ArrayPushBack(keybuf, strptr[q]);
				}
				else if(strptr[q] == ':')
					val_mode = true;
			}
			if(keybuf)
				ArrayPushBack(keybuf, 0);
			if(valbuf)
				ArrayPushBack(valbuf, 0);
		}
		void to_kv(JSONRef keyref, JSONRef valref)
		{
			int _start = start, _end = end;
			bool quoted = false;
			bool val_mode = false;
			if(keyref)
				keyref->from(this);
			if(valref)
				valref->from(this);
			for(int q = _start; q < _end; ++q)
			{
				if(strptr[q] == '"')
				{
					quoted = !quoted;
					if(val_mode)
					{
						if(valref)
						{
							if(quoted)
								valref->start = q;
							else
							{
								valref->end = q+1;
								return;
							}
						}
					}
					else
					{
						if(keyref)
						{
							if(quoted)
								keyref->start = q;
							else keyref->end = q+1;
						}
					}
				}
				if(val_mode && !quoted)
				{
					if(valref)
					{
						valref->start = q;
						valref->end = _end;
					}
					return;
				}
				if(!quoted && strptr[q] == ':')
					val_mode = true;
			}
		}
		void set_kv(char32 key, char32 val, bool valstr = false)
		{
			JSONRef kref = new JSONRef(strptr);
			JSONRef vref = new JSONRef(strptr);
			int diff = 0;
			to_kv(kref,vref);
			if(key)
			{
				int oend = kref->end;
				kref->set_str(key);
				diff += kref->end-oend;
			}
			if(val)
			{
				int oend = vref->end;
				if(valstr)
					vref->set_str(val);
				else vref->set(val);
				diff += kref->end-oend;
			}
			delete kref;
			delete vref;
			end += diff;
		}
		int get_int()
		{
			char32 buf[0];
			get(buf);
			return atoi(buf);
		}
		long get_long()
		{
			char32 buf[0];
			get(buf);
			return atol(buf);
		}
		bool get_bool()
		{
			char32 buf[0];
			get(buf);
			return !stricmp(buf,"true");
		}
		void set(char32 buf)
		{
			if(end <= start || !IsValidArray(strptr))
				return;
			char32 postbuf[0];
			scrape_postbuf(postbuf);
			int osz = strlen(strptr);
			ResizeArray(strptr, start+1);
			strptr[-1] = 0;
			sprintf(strptr, "%s%s%s", strptr, buf, postbuf);
			end += strlen(strptr)-osz;
		}
		void set_str(char32 buf)
		{
			if(end <= start || !IsValidArray(strptr))
				return;
			char32 postbuf[0];
			scrape_postbuf(postbuf);
			int osz = strlen(strptr);
			ResizeArray(strptr, start+1);
			strptr[-1] = 0;
			sprintf(strptr, "%s\"%s\"%s", strptr, buf, postbuf);
			end += strlen(strptr)-osz;
		}
		bool valid()
		{
			return end > start && IsValidArray(strptr);
		}
		bool add_key(char32 key, char32 val = NULL, bool overwrite = false)
		{
			int _s = start, _e = end, diff = 0;
			bool b = sub_find({NULL,{key}});
			if(b && overwrite)
			{
				char32 buf[1];
				sprintf(buf,"%s",val ? val : "\"\"");
				int sz = strlen(strptr);
				set(buf);
				diff = strlen(strptr) - sz;
			}
			start = _s; end = _e+diff;
			if(b)
				return overwrite;
			bool clamped = false;
			if(strptr[end] != '}')
			{
				if(strptr[start] == '{' && strptr[end-1] == '}')
				{
					++start;
					--end;
					clamped = true;
				}
				else return false;
			}
			int sz = strlen(strptr);
			char32 postbuf[0];
			scrape_postbuf(postbuf);
			ResizeArray(strptr, end+1);
			strptr[-1] = 0;
			
			if(start == end)
				sprintf(strptr, "%s\"%s\":%s%s", strptr, key, val ? val : "\"\"", postbuf);
			else sprintf(strptr, "%s,\"%s\":%s%s", strptr, key, val ? val : "\"\"", postbuf);
			end += strlen(strptr)-sz;
			if(clamped)
			{
				--start;
				++end;
			}
			return true;
		}
		bool add_key_str(char32 key, char32 str, bool overwrite = false)
		{
			int _s = start, _e = end, diff = 0;
			bool b = sub_find({NULL,{key}});
			if(b && overwrite)
			{
				char32 buf[1];
				sprintf(buf,"\"%s\"",str);
				int sz = strlen(strptr);
				set(buf);
				diff = strlen(strptr) - sz;
			}
			start = _s; end = _e+diff;
			if(b)
				return overwrite;
			bool clamped = false;
			if(strptr[end] != '}')
			{
				if(strptr[start] == '{' && strptr[end-1] == '}')
				{
					++start;
					--end;
					clamped = true;
				}
				else return false;
			}
			int sz = strlen(strptr);
			char32 postbuf[0];
			scrape_postbuf(postbuf);
			ResizeArray(strptr, end+1);
			strptr[-1] = 0;
		   
			if(start == end)
				sprintf(strptr, "%s\"%s\":\"%s\"%s", strptr, key, str, postbuf);
			else sprintf(strptr, "%s,\"%s\":\"%s\"%s", strptr, key, str, postbuf);
			end += strlen(strptr)-sz;
			if(clamped)
			{
				--start;
				++end;
			}
			return true;
		}
		bool add_key_bool(char32 key, bool b, bool overwrite = false)
		{
			return add_key(key, b ? "true" : "false", overwrite);
		}
		bool add_key_int(char32 key, untyped val, bool overwrite = false)
		{
			int _s = start, _e = end, diff = 0;
			bool b = sub_find({NULL,{key}});
			if(b && overwrite)
			{
				char32 buf[1];
				sprintf(buf,"%d",val);
				int sz = strlen(strptr);
				set(buf);
				diff = strlen(strptr) - sz;
			}
			start = _s; end = _e+diff;
			if(b)
				return overwrite;
			bool clamped = false;
			if(strptr[end] != '}')
			{
				if(strptr[start] == '{' && strptr[end-1] == '}')
				{
					++start;
					--end;
					clamped = true;
				}
				else return false;
			}
			int sz = strlen(strptr);
			char32 postbuf[0];
			scrape_postbuf(postbuf);
			ResizeArray(strptr, end+1);
			strptr[-1] = 0;
			
			if(start == end)
				sprintf(strptr, "%s\"%s\":%d%s", strptr, key, val, postbuf);
			else sprintf(strptr, "%s,\"%s\":%d%s", strptr, key, val, postbuf);
			end += strlen(strptr)-sz;
			if(clamped)
			{
				--start;
				++end;
			}
			return true;
		}
		bool add_key_long(char32 key, long val, bool overwrite = false)
		{
			int _s = start, _e = end, diff = 0;
			bool b = sub_find({NULL,{key}});
			if(b && overwrite)
			{
				char32 buf[1];
				sprintf(buf,"%l",val);
				int sz = strlen(strptr);
				set(buf);
				diff = strlen(strptr) - sz;
			}
			start = _s; end = _e+diff;
			if(b)
				return overwrite;
			bool clamped = false;
			if(strptr[end] != '}')
			{
				if(strptr[start] == '{' && strptr[end-1] == '}')
				{
					++start;
					--end;
					clamped = true;
				}
				else return false;
			}
			int sz = strlen(strptr);
			char32 postbuf[0];
			scrape_postbuf(postbuf);
			ResizeArray(strptr, end+1);
			strptr[-1] = 0;
			
			if(start == end)
				sprintf(strptr, "%s\"%s\":%l%s", strptr, key, val, postbuf);
			else sprintf(strptr, "%s,\"%s\":%l%s", strptr, key, val, postbuf);
			end += strlen(strptr)-sz;
			if(clamped)
			{
				--start;
				++end;
			}
			return true;
		}
		bool add_indx(char32 val = NULL)
		{
			if(type != JS_Array)
				return false;
			bool clamped = false;
			if(strptr[end] != ']')
			{
				if(strptr[start] == '[' && strptr[end-1] == ']')
				{
					++start;
					--end;
					clamped = true;
				}
				else return false;
			}
			int sz = strlen(strptr);
			char32 postbuf[0];
			scrape_postbuf(postbuf);
			ResizeArray(strptr, end+1);
			strptr[-1] = 0;
			
			if(start == end)
				sprintf(strptr, "%s%s%s", strptr, val ? val : "\"\"", postbuf);
			else sprintf(strptr, "%s,%s%s", strptr, val ? val : "\"\"", postbuf);
			end += strlen(strptr)-sz;
			if(clamped)
			{
				--start;
				++end;
			}
			return true;
		}
		bool add_indx_str(char32 str)
		{
			if(type != JS_Array)
				return false;
			bool clamped = false;
			if(strptr[end] != ']')
			{
				if(strptr[start] == '[' && strptr[end-1] == ']')
				{
					++start;
					--end;
					clamped = true;
				}
				else return false;
			}
			int sz = strlen(strptr);
			char32 postbuf[0];
			scrape_postbuf(postbuf);
			ResizeArray(strptr, end+1);
			strptr[-1] = 0;
			
			if(start == end)
				sprintf(strptr, "%s\"%s\"%s", strptr, str, postbuf);
			else sprintf(strptr, "%s,\"%s\"%s", strptr, str, postbuf);
			end += strlen(strptr)-sz;
			if(clamped)
			{
				--start;
				++end;
			}
			return true;
		}
		bool add_indx_bool(bool b)
		{
			if(type != JS_Array)
				return false;
			return add_indx(b ? "true" : "false");
		}
		bool add_indx_int(untyped val)
		{
			if(type != JS_Array)
				return false;
			bool clamped = false;
			if(strptr[end] != ']')
			{
				if(strptr[start] == '[' && strptr[end-1] == ']')
				{
					++start;
					--end;
					clamped = true;
				}
				else return false;
			}
			int sz = strlen(strptr);
			char32 postbuf[0];
			scrape_postbuf(postbuf);
			ResizeArray(strptr, end+1);
			strptr[-1] = 0;
			
			if(start == end)
				sprintf(strptr, "%s%d%s", strptr, val, postbuf);
			else sprintf(strptr, "%s,%d%s", strptr, val, postbuf);
			end += strlen(strptr)-sz;
			if(clamped)
			{
				--start;
				++end;
			}
			return true;
		}
		bool add_indx_long(untyped val)
		{
			if(type != JS_Array)
				return false;
			bool clamped = false;
			if(strptr[end] != ']')
			{
				if(strptr[start] == '[' && strptr[end-1] == ']')
				{
					++start;
					--end;
					clamped = true;
				}
				else return false;
			}
			int sz = strlen(strptr);
			char32 postbuf[0];
			scrape_postbuf(postbuf);
			ResizeArray(strptr, end+1);
			strptr[-1] = 0;
			
			if(start == end)
				sprintf(strptr, "%s%l%s", strptr, val, postbuf);
			else sprintf(strptr, "%s,%l%s", strptr, val, postbuf);
			end += strlen(strptr)-sz;
			if(clamped)
			{
				--start;
				++end;
			}
			return true;
		}
		int count_indx()
		{
			int cache_start = start, cache_end = end;
			if(strptr[end] != ']')
			{
				if(strptr[start] == '[' && strptr[end-1] == ']')
				{
					++start;
					--end;
				}
				else return 0;
			}
			
			int brackets[0];
			ArrayPushBack(brackets, '[');
			int brack_level = SizeOfArray(brackets);
			int indx = 0;
			int q = 0;
			while(SizeOfArray(brackets))
			{
				if(brackets[-1] == '"' && strptr[indx] != '"')
				{
					++indx;
					continue;
				}
				switch(strptr[indx])
				{
					case '[':
					case '{':
						ArrayPushBack(brackets, strptr[indx]);
						break;
					case ']':
						if(brackets[-1] != '[')
							return 0;
						if(SizeOfArray(brackets) == brack_level)
							++q;
						ArrayPopBack(brackets);
						break;
					case '}':
						if(brackets[-1] != '{')
							return 0;
						if(SizeOfArray(brackets) == brack_level)
							++q;
						ArrayPopBack(brackets);
						break;
					case '"':
						if(brackets[-1] == '"')
							ArrayPopBack(brackets);
						else ArrayPushBack(brackets, '"');
						break;
					case ',':
						if(SizeOfArray(brackets) == brack_level)
							++q;
						break;
				}
				if(++indx >= end)
					return 0;
			}
			start = cache_start;
			end = cache_end;
			return q;
		}
		bool find(untyped search_arr)
		{
			start = 0;
			end = strlen(strptr);
			return sub_find(search_arr);
		}
		bool sub_find(untyped search_arr)
		{
			bool index_mode = false;
			int from = this->start, to = this->end;
			Type ltype, ty;
			for(arr : search_arr)
			{
				index_mode = !index_mode;
				if(!arr)
					continue;
				for(val : arr)
				{
					int indx = from;
					while(is_ws(strptr[indx]))
						++indx;
					int brackets[0];
					if(index_mode)
					{
						if(strptr[indx++] != '[')
							return false;
						if(val < 0)
						{
							++from;
							--to;
							ty = JS_Array;
							continue;
						}
						ltype = JS_Array;
						ArrayPushBack(brackets, '[');
						int brack_level = SizeOfArray(brackets);
						int _start = 0, _end = 0;
						for(int q = 0; q <= val; ++q)
						{
							_start = indx;
							_end = 0;
							until(_end)
							{
								if(brackets[-1] == '"' && strptr[indx] != '"')
								{
									++indx;
									continue;
								}
								switch(strptr[indx])
								{
									case '[':
									case '{':
										ArrayPushBack(brackets, strptr[indx]);
										break;
									case ']':
										if(brackets[-1] != '[')
											return false;
										if(SizeOfArray(brackets) == brack_level)
											_end = indx;
										ArrayPopBack(brackets);
										break;
									case '}':
										if(brackets[-1] != '{')
											return false;
										if(SizeOfArray(brackets) == brack_level)
											_end = indx;
										ArrayPopBack(brackets);
										break;
									case '"':
										if(brackets[-1] == '"')
											ArrayPopBack(brackets);
										else ArrayPushBack(brackets, '"');
										break;
									case ',':
										if(SizeOfArray(brackets) == brack_level)
											_end = indx;
										break;
								}
								if(_end)
									break;
								if(++indx >= to)
									return false;
							}
						}
						from = _start;
						to = _end;
					}
					else
					{
						if(strptr[indx++] != '{')
							return false;
						if(val[0] == 0)
						{
							++from;
							--to;
							ty = JS_Object;
							continue;
						}
						ltype = JS_Object;
						ArrayPushBack(brackets, '{');
						int brack_level = SizeOfArray(brackets);
						int _start = 0, _end = 0;
						while(true)
						{
							_start = indx;
							_end = 0;
							bool key = true;
							bool value = false;
							char32 keybuf[0];
							until(_end)
							{
								if(brackets[-1] == '"' && strptr[indx] != '"')
								{
									if(key)
										ArrayPushBack(keybuf, strptr[indx]);
									if(++indx >= to)
										return false;
									continue;
								}
								switch(strptr[indx])
								{
									case '[':
									case '{':
										ArrayPushBack(brackets, strptr[indx]);
										break;
									case ']':
										if(brackets[-1] != '[')
											return false;
										if(SizeOfArray(brackets) == brack_level)
											_end = indx;
										ArrayPopBack(brackets);
										break;
									case '}':
										if(brackets[-1] != '{')
											return false;
										if(SizeOfArray(brackets) == brack_level)
											_end = indx;
										ArrayPopBack(brackets);
										break;
									case '"':
										if(brackets[-1] == '"')
										{
											ArrayPopBack(brackets);
											if(key)
												key = false;
										}
										else ArrayPushBack(brackets, '"');
										break;
									case ':':
										if(!key && !value)
										{
											_start = indx+1;
											value = true;
										}
										break;
									case ',':
										if(SizeOfArray(brackets) == brack_level)
											_end = indx;
										break;
								}
								++indx;
								if(indx >= to && !_end)
									return false;
							}
							ArrayPushBack(keybuf, 0);
							unless(strcmp(keybuf,val))
								break;
							if(indx >= to)
								return false;
						}
						from = _start;
						to = _end;
					}
					if(from == to)
						ty = JS_None;
					else switch(strptr[to-1])
					{
						case ']':
							ty = JS_Array;
							break;
						case '}':
							ty = JS_Object;
							break;
						case '"':
							ty = JS_String;
							break;
						default:
							ty = JS_Value;
							break;
					}
				}
			}
			this->type = ty;
			this->listtype = ltype;
			this->start = from;
			this->end = to;
			return true;
		}
		bool first_indx()
		{
			if(type != JS_Array)
				return false;
			if(end-start < 3)
				return false;
			if(strptr[start] == '[' && strptr[end-1] == ']')
			{
				++start;
				--end;
			}
			int brackets[0];
			ArrayPushBack(brackets, '[');
			int brack_level = SizeOfArray(brackets);
			int _start = this->start, _end = 0;
			int indx = _start;
			until(_end)
			{
				if(brackets[-1] == '"' && strptr[indx] != '"')
				{
					++indx;
					continue;
				}
				switch(strptr[indx])
				{
					case '[':
					case '{':
						ArrayPushBack(brackets, strptr[indx]);
						break;
					case ']':
						if(brackets[-1] != '[')
							return false;
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						ArrayPopBack(brackets);
						break;
					case '}':
						if(brackets[-1] != '{')
							return false;
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						ArrayPopBack(brackets);
						break;
					case '"':
						if(brackets[-1] == '"')
							ArrayPopBack(brackets);
						else ArrayPushBack(brackets, '"');
						break;
					case ',':
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						break;
				}
				if(!_end && ++indx > this->end)
					return false;
			}
			start = _start;
			end = _end;
			
			listtype = JS_Array;
			if(start == end)
				type = JS_None;
			else switch(strptr[end-1])
			{
				case ']':
					type = JS_Array;
					break;
				case '}':
					type = JS_Object;
					break;
				case '"':
					type = JS_String;
					break;
				default:
					type = JS_Value;
					break;
			}
			return true;
		}
		bool next_indx()
		{
			if(strptr[end] != ',')
				return false;
			if(listtype != JS_Array)
				return false;
			
			int brackets[0];
			ArrayPushBack(brackets, '[');
			int brack_level = SizeOfArray(brackets);
			int _start = this->end+1, _end = 0;
			int indx = _start;
			until(_end)
			{
				if(brackets[-1] == '"' && strptr[indx] != '"')
				{
					++indx;
					continue;
				}
				switch(strptr[indx])
				{
					case '[':
					case '{':
						ArrayPushBack(brackets, strptr[indx]);
						break;
					case ']':
						if(brackets[-1] != '[')
							return false;
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						ArrayPopBack(brackets);
						break;
					case '}':
						if(brackets[-1] != '{')
							return false;
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						ArrayPopBack(brackets);
						break;
					case '"':
						if(brackets[-1] == '"')
							ArrayPopBack(brackets);
						else ArrayPushBack(brackets, '"');
						break;
					case ',':
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						break;
				}
				++indx;
			}
			if(_start == _end)
				type = JS_None;
			else switch(strptr[_end-1])
			{
				case ']':
					type = JS_Array;
					break;
				case '}':
					type = JS_Object;
					break;
				case '"':
					type = JS_String;
					break;
				default:
					type = JS_Value;
					break;
			}
			start = _start;
			end = _end;
			return true;
		}
		bool first_kv()
		{
			if(type != JS_Object)
				return false;
			if(end-start < 7)
				return false;
			if(strptr[start] == '{' && strptr[end-1] == '}')
			{
				++start;
				--end;
			}
			int brackets[0];
			ArrayPushBack(brackets, '{');
			int brack_level = SizeOfArray(brackets);
			int _start = this->start, _end = 0;
			int indx = _start;
			until(_end)
			{
				if(brackets[-1] == '"' && strptr[indx] != '"')
				{
					++indx;
					continue;
				}
				switch(strptr[indx])
				{
					case '[':
					case '{':
						ArrayPushBack(brackets, strptr[indx]);
						break;
					case ']':
						if(brackets[-1] != '[')
							return false;
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						ArrayPopBack(brackets);
						break;
					case '}':
						if(brackets[-1] != '{')
							return false;
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						ArrayPopBack(brackets);
						break;
					case '"':
						if(brackets[-1] == '"')
							ArrayPopBack(brackets);
						else ArrayPushBack(brackets, '"');
						break;
					case ',':
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						break;
				}
				if(!_end && ++indx > this->end)
					return false;
			}
			start = _start;
			end = _end;
			
			listtype = JS_Object;
			type = JS_KV;
			return true;
		}
		bool next_kv()
		{
			if(strptr[end] != ',')
				return false;
			if(listtype != JS_Object || type != JS_KV)
				return false;
			int brackets[0];
			ArrayPushBack(brackets, '{');
			int brack_level = SizeOfArray(brackets);
			int _start = this->end+1, _end = 0;
			int indx = _start;
			until(_end)
			{
				if(indx >= SizeOfArray(strptr) || !strptr[indx])
					return false;
				if(brackets[-1] == '"' && strptr[indx] != '"')
				{
					++indx;
					continue;
				}
				switch(strptr[indx])
				{
					case '[':
					case '{':
						ArrayPushBack(brackets, strptr[indx]);
						break;
					case ']':
						if(brackets[-1] != '[')
							return false;
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						ArrayPopBack(brackets);
						break;
					case '}':
						if(brackets[-1] != '{')
							return false;
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						ArrayPopBack(brackets);
						break;
					case '"':
						if(brackets[-1] == '"')
							ArrayPopBack(brackets);
						else ArrayPushBack(brackets, '"');
						break;
					case ',':
						if(SizeOfArray(brackets) == brack_level)
							_end = indx;
						break;
				}
				++indx;
			}
			start = _start;
			end = _end;
			return true;
		}

		void scrape_postbuf(char32 buf)
		{
			if(strptr[-1])
			{
				ResizeArray(strptr, SizeOfArray(strptr)+1);
				strptr[-1] = 0;
			}
			const int ex_len = strlen(strptr)-end;
			ResizeArray(buf, ex_len+1);
			for(int q = 0; q < ex_len; ++q)
				buf[q] = strptr[q+end];
			buf[-1] = 0;
		}
		void print()
		{
			char32 buf[1];
			get(buf);
			printf("%s\n",buf);
		}
	}
	bool is_ws(char32 c)
	{
		switch(c)
		{
			case ' ':
			case '\n':
			case '\r':
			case '\t':
				return true;
			default:
				return false;
		}
	}
}
