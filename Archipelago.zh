#include "json.zh"
namespace Archipelago
{
	using namespace JSON;
	CONFIGB AP_LOG = true;
	CONFIG AP_LOG_COMMUNICATION = 1; // 0 = none, 1 = some, 2 = full
	CONFIGB AP_DEV_LOG = true;
	//This data can be freely modified
	int quitkey = KEY_Q;
	//This data should not be modified unless you know what you are doing
	char32 ip[1];
	char32 port[1];
	char32 slot[1];
	char32 pwd[1];
	char32 death_alias[1];
	long ap_uid;

	bool did_setup = false;

	websocket sock;
	ConnectionStatus status;

	bool do_deathlink = false;
	int deathlink_amnesty = 0;

	int ap_player_id, ap_player_team;
	char32 seed[1];
	long base_id;
	int num_items, num_locs;
	bool checked_locations[0];
	bool checked_locations_2[0];
	int collected_items[0];
	NetworkPlayer players[0];
	NetworkSlot slots[0];
	NetworkItem location_infos[0];
	//
	int id_to_index(long id)
	{
		return (id-base_id)*10000;
	}
	long index_to_id(long indx)
	{
		return (indx/10000)+base_id;
	}

	enum ClientStatus
	{
		CLIENT_UNKNOWN = 0,
		CLIENT_CONNECTED = 5,
		CLIENT_READY = 10,
		CLIENT_PLAYING = 20,
		CLIENT_GOAL = 30
	};

	enum ConnectionStatus
	{
		STATUS_DISCONNECTED,
		STATUS_CONNECTING,
		STATUS_CONNECTED,
		STATUS_AUTHENTICATED,
		STATUS_DATA_LOADED
	};

	DEFINEL ITEMPROG_FILLER      = 000Lb;
	DEFINEL ITEMPROG_PROGRESSIVE = 001Lb;
	DEFINEL ITEMPROG_USEFUL      = 010Lb;
	DEFINEL ITEMPROG_TRAP        = 100Lb;
	DEFINEL ITEMPROG_BITS        = 111Lb;
	class NetworkItem
	{
		char32 item_id[1];
		char32 location_id[1];
		int player_id;
		long flags;
		bool valid;
		//Only has names if filled from DataPackages
		char32 item_name[1];
		char32 location_name[1];
		NetworkItem(char32 iid, char32 lid, int pid, long fl, char32 iname = NULL, char32 lname = NULL)
		{
			if(iid)
				sprintf(item_id,"%s",iid);
			if(lid)
				sprintf(location_id,"%s",lid);
			player_id = pid;
			flags = fl;
			if(iname)
				sprintf(item_name,"%s",iname);
			if(lname)
				sprintf(location_name,"%s",lname);
			valid = true;
		}
		NetworkItem(JSONRef ref)
		{
			from(ref);
		}
		NetworkItem();
		NetworkItem copy()
		{
			NetworkItem ret = new NetworkItem(item_id, location_id, player_id, flags, item_name, location_name);
			ret->valid = valid;
			return ret;
		}
		void from(JSONRef ref)
		{
			valid = true;

			JSONRef js = new JSONRef(ref);
			if(js->sub_find({NULL,{"item"}}))
				js->get_trim(item_id);
			else valid = false;

			js->from(ref);
			if(js->sub_find({NULL,{"location"}}))
				js->get_trim(location_id);
			else valid = false;

			js->from(ref);
			if(js->sub_find({NULL,{"player"}}))
				player_id = js->get_int();
			else valid = false;

			js->from(ref);
			if(js->sub_find({NULL,{"flags"}}))
				flags = js->get_long();
			else valid = false;

			js->from(ref);
			if(js->sub_find({NULL,{"item_name"}}))
				js->get_trim(item_name);
			js->from(ref);
			if(js->sub_find({NULL,{"location_name"}}))
				js->get_trim(location_name);

			delete js;
		}
		int localize_item_id()
		{
			return id_to_index(atol(item_id));
		}
		int localize_location_id()
		{
			return id_to_index(atol(location_id));
		}
		bool is_filler()
		{
			return (flags & ITEMPROG_BITS) == ITEMPROG_FILLER;
		}
		bool is_progression()
		{
			return flags & ITEMPROG_PROGRESSIVE;
		}
		bool is_useful()
		{
			return flags & ITEMPROG_USEFUL;
		}
		bool is_trap()
		{
			return flags & ITEMPROG_TRAP;
		}
		void print()
		{
			if(valid)
				printf("ITEM: id %s, location %s, player %d, flags %l\n", item_id, location_id, player_id, flags);
			else printf("ITEM: INVALID\n");
		}
	}
	
	class NetworkPlayer
	{
		int team;
		int slot_id;
		char32 alias[1];
		char32 name[1];
		bool valid;
		NetworkPlayer(int teamid, int slotid, char32 alias_str, char32 name_str)
		{
			team = teamid;
			slot_id = slotid;
			sprintf(alias, "%s", alias_str);
			sprintf(name, "%s", name_str);
			valid = true;
		}
		NetworkPlayer(JSONRef ref)
		{
			valid = true;

			JSONRef js = new JSONRef(ref);
			if(js->sub_find({NULL,{"team"}}))
				team = js->get_int();
			else valid = false;

			js->from(ref);
			if(js->sub_find({NULL,{"slot"}}))
				slot_id = js->get_int();
			else valid = false;

			js->from(ref);
			if(js->sub_find({NULL,{"alias"}}))
				js->get_trim(alias);
			else valid = false;

			js->from(ref);
			if(js->sub_find({NULL,{"name"}}))
				js->get_trim(name);
			else valid = false;

			delete js;
		}
	}
	class NetworkSlot
	{
		char32 name[1];
		char32 game[1];
		bool valid;
		NetworkSlot(JSONRef ref)
		{
			valid = true;

			JSONRef js = new JSONRef(ref);
			if(js->sub_find({NULL,{"name"}}))
				js->get_trim(name);
			else valid = false;

			js->from(ref);
			if(js->sub_find({NULL,{"game"}}))
				js->get_trim(game);
			else valid = false;

			delete js;
		}
	}
	namespace Settings
	{
		DEFINEL ITEMS_NONE                  = 000Lb;
		DEFINEL ITEMS_REMOTE                = 001Lb;
		DEFINEL ITEMS_REMOTE_STARTING       = 101Lb;
		DEFINEL ITEMS_REMOTE_LOCAL          = 011Lb;
		DEFINEL ITEMS_REMOTE_STARTING_LOCAL = 111Lb;

		void ap_get_game(char32 buf); //Return your game name
		long items_handling() : default 101Lb; //return your item handling mode
		void add_tags(JSONRef ref);
		void on_room_info(JSONRef ref);
		void on_connected(JSONRef ref);
		void on_item_received(NetworkItem itm, int total_count);
		void on_location_scouts(NetworkItem itm);
		void on_room_update(JSONRef ref);
		bool on_print_json(JSONRef ref) : default true;
		void on_bounced(JSONRef ref);
		void on_retrieved(JSONRef ref);
		void on_set_reply(JSONRef ref);
		void do_remove_location(int id);
	}
	namespace DeathLink
	{
		char32 death_reason[1];
		//Sends deathlink deaths when you die.
		hero script AP_DeathLink_OnDeath
		{
			int cur_amnesty = 0;
			void run()
			{
				if(cur_amnesty < deathlink_amnesty)
					++cur_amnesty;
				else
				{
					cur_amnesty = 0;
					unless(death_reason[0])
						sprintf(death_reason,"%s died",slot);
					death_send(death_reason);
					death_reason[0] = 0;
				}
			}
		}
		//Optional script; sets the 'death reason' for DeathLink
		generic script AP_DeathLink_OnDamage
		{
			void run()
			{
				for(int q = 0; q < GENSCR_NUMEVENT; ++q)
					this->EventListen[q] = q==GENSCR_EVENT_HERO_HIT_2;
				while(true)
				{
					WaitEvent();
					char32 enemybuf[0];
					switch(Game->EventData[GENEV_HEROHIT_HITTYPE])
					{
						case OBJTYPE_NPC:
							npc obj = Game->EventData[GENEV_HEROHIT_HITOBJ];
							npcdata nd = Game->LoadNPCData(obj->ID);
							nd->GetName(enemybuf);
							sprintf(death_reason, "%s was killed by '%s'", slot, enemybuf);
							break;
						case OBJTYPE_LWPN:
							lweapon obj = Game->EventData[GENEV_HEROHIT_HITOBJ];
							sprintf(death_reason, "%s was killed by their own weapon", slot);
							break;
						case OBJTYPE_EWPN:
							eweapon obj = Game->EventData[GENEV_HEROHIT_HITOBJ];
							sprintf(death_reason, "%s was killed by an enemy weapon", slot);
							break;
						case OBJTYPE_COMBODATA:
							combodata obj = Game->EventData[GENEV_HEROHIT_HITOBJ];
							sprintf(death_reason, "%s was killed by the environment", slot);
							break;
						default:
							sprintf(death_reason,"%s died", slot);
							break;
					}
				}
			}
		}

		void death_send(char32 reason)
		{
			unless(do_deathlink)
				return;
			char32 msg[0];
			long seconds = (GetSystemTime(RTC_SECOND)*1L)
				+ (GetSystemTime(RTC_MINUTE)*60L)
				+ (GetSystemTime(RTC_HOUR)*3600L);
			sprintf(msg, "[{\"cmd\":\"Bounce\",\"tags\":[\"DeathLink\"],\"data\":{\"time\":%l,\"source\":\"%s\",\"cause\":\"%s\"}}]",
				seconds, death_alias, reason);
			sock->Send(msg);
		}

		void death_recv(char32 source, char32 cause)
		{
			if(cause[0])
				printf("[DEATHLINK] Perished due to: %s\n", cause);
			else printf("[DEATHLINK] Perished due to: %s died\n", source);
			Hero->Kill(true);
		}
	}

	char32 quitchar()
	{
		return KeyToChar(quitkey,false,true);
	}

	bool checked_location(int indx)
	{
		return checked_locations[indx];
	}

	int collected_item(int indx)
	{
		return collected_items[indx];
	}

	void mark_location_checked(int indx)
	{
		checked_locations[indx] = true;
	}
	void mark_item_collected(int indx)
	{
		++collected_items[indx];
	}

	NetworkItem check_location_info(int indx)
	{
		return location_infos[indx];
	}

	void connect_socket()
	{
		clear_requests();
		bool ssl = true;
		char32 buf[0];
		if(pwd[0])
			printf("[CONNECT] %s:%s (as %s, pwd '%s')\n", ip, port, slot, pwd);
		else printf("[CONNECT] %s:%s (as %s)\n", ip, port, slot);
		status = STATUS_CONNECTING;
		int attempt_count;
		int delay = 0;
		char32 quit_char = quitchar();
		while(true)
		{
			if(sock)
			{
				sock->Free();
				sock = NULL;
			}
			if(Input->Key[quitkey])
			{
				printf("%c pressed; cancelling connection\n", quit_char);
				return; //Failed, and user cancelled
			}
			if(delay)
			{
				--delay;
				Waitframe();
				continue;
			}
			unless(++attempt_count % 10)
			{
				printf("Failing a lot... waiting a bit to try again (Attempts: %d, press %c to quit)\n", attempt_count, quit_char);
				delay = 15*60;
				continue;
			}
			sprintf(buf, "%s://%s:%s", ssl ? "wss" : "ws", ip, port);
			sock = Game->LoadWebSocket(buf);
			while(sock->State == WEBSOCKET_STATE_CONNECTING)
			{
				if(Input->Key[quitkey])
					continue 2;
				Waitframe();
			}
			if(sock->State == WEBSOCKET_STATE_CLOSED)
			{
				char32 error[0];
				sock->GetError(error);
				switch(error)
				{
					case "endpoint not secure":
						break;
					default:
						printf("Failed to connect (%s): '%s'\n", ssl ? "wss" : "ws", error);
				}
				ssl = !ssl;
				continue;
			}
			if(sock->State != WEBSOCKET_STATE_OPEN)
			{
				printf("Failed to connect (%s): '%d'\n", ssl ? "wss" : "ws", sock->State);
				ssl = !ssl;
				continue;
			}
			if(!sock)
			{
				printf("Fucked up error! (%s)\n", ssl ? "wss" : "ws");
				ssl = !ssl;
				continue;
			}
			break;
		}
	}

	void disconnect_socket()
	{
		if(sock)
			sock->Free();
		sock = NULL;
		status = STATUS_DISCONNECTED;
	}
	
	bool retry()
	{
		if(sock)
		{
			_do_connect();
			return true;
		}
		return false;
	}

	void clear_requests()
	{
		//!TODO
	}

	bool update_socket()
	{
		if(!sock || sock->State == WEBSOCKET_STATE_CLOSED)
		{
			if(AP_LOG)
				printf("Disconnected from Archipelago");
			return retry();
		}
		return true;
	}

	bool socket_valid()
	{
		return sock && sock->State == WEBSOCKET_STATE_OPEN;
	}

	generic script APConnect
	{
		void run()
		{
			connect_socket();
		}
	}

	void on_data_loaded()
	{
		int missed_checks[0];
		for(int q = 0; q < num_locs; ++q)
		{
			if(checked_locations_2[q])
				mark_and_remove_loc(q, true);
			else if(checked_locations[q])
				ArrayPushBack(missed_checks, q);
		}
		send_location_checks_arr(missed_checks);
		send_sync();
	}
	enum APHandlerEndCond
	{
		APH_END_NEVER,
		APH_END_AUTH,
		APH_END_DATA
	};
	generic script APHandler
	{
		void run(APHandlerEndCond end_cond)
		{
			#option STRING_SWITCH_CASE_INSENSITIVE on
			ap_setup();
			bool do_exit = false;
			until(do_exit)
			{
				until(sock || do_exit)
					Waitframe();
				while(sock && update_socket() && !do_exit)
				{
					while(sock && sock->HasMessage && !do_exit)
					{
						char32 msg = sock->Receive();
						switch(sock->MessageType)
						{
							case WEBSOCKET_MESSAGE_TYPE_TEXT:
							{
								if(AP_LOG_COMMUNICATION > 1)
									printf("[RECV]: %s\n", msg);
								JSONRef parent_ref = new JSONRef(msg);
								JSONRef ref = new JSONRef(msg);
								JSONRef ref2 = new JSONRef(msg);
								parent_ref->find({{-1}});

								JSONRef resp = new JSONRef();

								char32 buf[1];

								int q = 0;
								if(parent_ref->first_indx())
									do
									{
										if(parent_ref->find({{q},{"cmd"}}))
										{
											parent_ref->get_trim(buf);
										}
										else continue;
										parent_ref->find({{q}});
										ref->from(parent_ref);
										ref2->from(ref);

										char32 response[] = "[{}]";
										resp->strptr = response;
										resp->find({{0},{""}});
										
										if(AP_LOG_COMMUNICATION)
											printf("[COMMAND] %s\n", buf);
										switch(buf)
										{
											case "RoomInfo":
											{
												ref->sub_find({NULL,{"seed_name"}});
												ref->get_trim(seed);
												ref->from(parent_ref);
												ref->sub_find({NULL,{"datapackage_checksums"}});
												check_datapack_checksums(ref);

												char32 gamebuf[1];
												Settings::ap_get_game(gamebuf);
												resp->add_key_str("cmd","Connect");
												resp->add_key_str("game", gamebuf);
												resp->add_key_str("name", slot);
												resp->add_key_str("password", pwd);
												resp->add_key_long("uuid", ap_uid);
												resp->add_key("tags", "[]");
												resp->add_key("version", "{}");
												resp->add_key_long("items_handling", Settings::items_handling());
												resp->add_key_bool("slot_data", true);
												resp->find({{0},{"tags"}});
												Settings::add_tags(resp);
												resp->find({{0},{"version"}});
												// AP 0.4.4
												resp->add_key_int("major",0);
												resp->add_key_int("minor",4);
												resp->add_key_int("build",4);
												resp->add_key_str("class","Version");
												
												status = STATUS_CONNECTED;
												ref->from(parent_ref);
												Settings::on_room_info(ref);
												break;
											}
											case "Connected":
											{
												ref->sub_find({NULL,{"slot"}});
												ap_player_id = ref->get_int();
												ref->from(parent_ref);
												ref->sub_find({NULL,{"team"}});
												ap_player_team = ref->get_int();
												ref->from(parent_ref);
												ref->sub_find({NULL,{"slot_data"}});
												ref2->from(ref);
												if(ref2->sub_find({NULL,{"base_id"}}))
													base_id = ref2->get_long();
												else
												{
													printf("No 'base_id' found in 'slot_data'! Connection failed!\n");
													disconnect_socket();
													break;
												}
												ref2->from(ref);
												if(ref2->sub_find({NULL,{"num_items"}}))
													num_items = ref2->get_int();
												else
												{
													printf("No 'num_items' found in 'slot_data'! Connection failed!\n");
													disconnect_socket();
													break;
												}
												ref2->from(ref);
												if(ref2->sub_find({NULL,{"num_locs"}}))
													num_locs = ref2->get_int();
												else
												{
													printf("No 'num_locs' found in 'slot_data'! Connection failed!\n");
													disconnect_socket();
													break;
												}
												ResizeArray(location_infos, num_locs);
												ResizeArray(checked_locations, num_locs);
												ResizeArray(collected_items, num_items);
												ResizeArray(checked_locations_2, 0);
												ResizeArray(checked_locations_2, num_locs);

												//not needed?
												//ref->from(parent_ref);
												//ref->sub_find({NULL,{"missing_locations"}});
												
												ref->from(parent_ref);
												ref->sub_find({NULL,{"checked_locations"}});
												if(ref->first_indx())
													do
													{
														int locid = id_to_index(ref->get_long());
														checked_locations_2[locid] = true;
													}
													while(ref->next_indx());
												
												ref->from(parent_ref);
												ref->sub_find({NULL,{"players"}});
												for(p : players)
													delete p;
												ResizeArray(players, 0);
												if(ref->first_indx())
													do
													{
														NetworkPlayer p = new NetworkPlayer(ref);
														GlobalObject(p);
														ArrayPushBack(players,p);
													}
													while(ref->next_indx());
												
												ref->from(parent_ref);
												ref->sub_find({NULL,{"slot_info"}});
												for(s : slots)
													delete s;
												ResizeArray(slots, 0);
												char32 kbuf[1], vbuf[1];
												if(ref->first_kv())
													do
													{
														ref->get_kv(NULL,vbuf);
														ref2->from(vbuf);
														NetworkSlot s = new NetworkSlot(ref2);
														GlobalObject(s);
														ArrayPushBack(slots,s);
													} while(ref->next_kv());

												do_deathlink = false;
												ref->from(parent_ref);
												if(ref->sub_find({NULL,{"slot_data","death_link"}}))
													if(ref->get_bool())
														do_deathlink = true;
												ref->from(parent_ref);
												if(ref->sub_find({NULL,{"slot_data","DeathLink"}}))
													if(ref->get_bool())
														do_deathlink = true;
												ref->from(parent_ref);
												if(ref->sub_find({NULL,{"slot_data","deathlink_amnesty"}}))
													deathlink_amnesty = ref->get_int();
												else if(ref->sub_find({NULL,{"slot_data","DeathLinkAmnesty"}}))
													deathlink_amnesty = ref->get_int();
												else deathlink_amnesty = 0;
												
												if(AP_LOG)
													printf("Connected to Archipelago (%s:%s as %s)\n",ip,port,slot);
												if(AP_DEV_LOG)
													printf("[DEV] ap_player_id = %d, ap_player_team = %d, deathlink = %s, amnesty = %d\n", ap_player_id, ap_player_team, do_deathlink ? "true" : "false", deathlink_amnesty);
												status = STATUS_AUTHENTICATED;
												ref->from(parent_ref);
												Settings::on_connected(ref);
												unless(sock)
													break;

												if(do_deathlink)
												{
													resp->add_key_str("cmd","ConnectUpdate");
													resp->add_key("tags", "[]");
													resp->find({{0},{"tags"}});
													resp->add_indx_str("DeathLink");
													Settings::add_tags(resp);

													if(Game->GetHeroScript("AP_DeathLink_OnDeath") != 3)
														printf("Script 'AP_DeathLink_OnDeath' needs to be assigned to the 'onDeath' slot for 'DeathLink' to work!\n");
													int genscr = Game->GetGenericScript("AP_DeathLink_OnDamage");
													if(genscr > 0)
														RunGenericScript(genscr);
												}
												unless(request_new_datapacks())
													request_location_info();
												if(end_cond == APH_END_AUTH)
													do_exit = true;
												break;
											}
											case "PrintJSON":
											{
												bool pr = Settings::on_print_json(ref);
												unless(sock)
													break;
												if(pr)
												{
													if(ref->find({{q},{"data"}}))
													{
														char32 buf[1];
														char32 text_buf[1], type_buf[1], player_buf[1], flags_buf[1];
														if(ref->first_indx())
															do
															{
																type_buf[0] = text_buf[0] = player_buf[0] = flags_buf[0] = 0;
																ref2->from(ref);
																if(ref2->sub_find({NULL,{"text"}}))
																	ref2->get_trim(text_buf);
																ref2->from(ref);
																if(ref2->sub_find({NULL,{"type"}}))
																	ref2->get_trim(type_buf);
																ref2->from(ref);
																if(ref2->sub_find({NULL,{"player"}}))
																	ref2->get_trim(player_buf);
																ref2->from(ref);
																if(ref2->sub_find({NULL,{"flags"}}))
																	ref2->get_trim(flags_buf);
																
																switch(type_buf)
																{
																	case "item_id":
																	{
																		NetworkPlayer plyr = players[atoi(player_buf)-1];
																		NetworkSlot slot = slots[plyr->slot_id-1];

																		char32 cache_buf[1], kbuf[1], vbuf[1];
																		load_cache_buf(cache_buf, slot->game);
																		JSONRef cache = new JSONRef(cache_buf);
																		bool found = false;
																		if(cache->sub_find({NULL,{"item_name_to_id"}}))
																		{
																			if(cache->first_kv())
																				do
																				{
																					cache->get_kv(kbuf,vbuf);
																					unless(strcmp(text_buf,vbuf))
																					{
																						sprintf(text_buf,"%s",kbuf);
																						found = true;
																						break;
																					}
																				} while(cache->next_kv())
																		}
																		unless(found)
																			sprintf(text_buf, "UNKNOWN ITM: %s", text_buf);

																		sprintf(buf, "%s%s", buf, text_buf);
																		long flags = atol(flags_buf);
																		if(flags)
																		{
																			bool comma = false;
																			for(int q = 0; q < 3; ++q)
																			{
																				long bit = 1Lb << q;
																				if(flags & bit)
																				{
																					sprintf(buf, "%s%s", buf, comma ? "," : " [");
																					switch(bit)
																					{
																						case ITEMPROG_PROGRESSIVE:
																							sprintf(buf, "%sProgressive", buf);
																							break;
																						case ITEMPROG_USEFUL:
																							sprintf(buf, "%sUseful", buf);
																							break;
																						case ITEMPROG_TRAP:
																							sprintf(buf, "%sTrap", buf);
																							break;
																					}
																					comma = true;
																				}
																			}
																			sprintf(buf, "%s]", buf);
																		}
																		delete cache;
																		break;
																	}
																	case "location_id":
																	{
																		NetworkPlayer plyr = players[atoi(player_buf)-1];
																		NetworkSlot slot = slots[plyr->slot_id-1];

																		char32 cache_buf[1], kbuf[1], vbuf[1];
																		load_cache_buf(cache_buf, slot->game);
																		JSONRef cache = new JSONRef(cache_buf);
																		bool found = false;
																		if(cache->sub_find({NULL,{"location_name_to_id"}}))
																		{
																			if(cache->first_kv())
																				do
																				{
																					cache->get_kv(kbuf,vbuf);
																					unless(strcmp(text_buf,vbuf))
																					{
																						sprintf(text_buf,"%s",kbuf);
																						found = true;
																						break;
																					}
																				} while(cache->next_kv())
																		}
																		unless(found)
																			sprintf(text_buf, "UNKNOWN LOC: %s", text_buf);

																		sprintf(buf, "%s%s", buf, text_buf);
																		delete cache;
																		break;
																	}
																	case "player_id":
																	{
																		NetworkPlayer plyr = players[atoi(text_buf)-1];
																		NetworkSlot slot = slots[plyr->slot_id-1];
																		sprintf(buf, "%s%s", buf, slot->name);
																		break;
																	}
																	default:
																		if(AP_DEV_LOG)
																			printf("[DEV] UNKNOWN PrintJSON Type: %s\n", type_buf);
																	//fallthrough
																	case "":
																		sprintf(buf, "%s%s", buf, text_buf);
																}
															} while(ref->next_indx());
														if(SizeOfArray(buf) > 30 && buf[-7] == '/'
															&& buf[-6] == 'h' && buf[-5] == 'e'
															&& buf[-4] == 'l' && buf[-3] == 'p')
														{
															if(AP_LOG_COMMUNICATION)
																printf("[BLOCKED] Useless help message\n");
															break; //skip help message, doesn't apply
														}
														printf("[AP] %s\n", buf);
													}
												}
												break;
											}
											case "ConnectionRefused":
											{
												if(ref->sub_find({NULL,{"errors"}}))
												{
													if(ref->first_indx())
													{
														char32 buf[0];
														ref->get_trim(buf);
														switch(buf)
														{
															case "InvalidSlot":
																printf("[AP] Connection Error: The slot '%s' was not found!\n", slot);
																break;
															case "InvalidPassword":
																printf("[AP] Connection Error: The password was incorrect!\n");
																break;
															//case "InvalidGame":
															//case "IncompatibleVersion":
															//case "InvalidItemsHandling":
															default:
																printf("[AP] Connection Error: %s\n", buf);
																break;
														}
													}
												}
												disconnect_socket();
												if(end_cond == APH_END_AUTH)
													do_exit = true;
												break;
											}
											case "ReceivedItems":
											{
												if(ref->sub_find({NULL,{"items"}}))
												{
													if(ref->first_indx())
													{
														NetworkItem itm = new NetworkItem();
														do
														{
															itm->from(ref);
															if(itm->valid)
															{
																int item_indx = itm->localize_item_id();
																if(itm->player_id == ap_player_id)
																	mark_and_remove_loc(item_indx, true);
																else
																{
																	mark_item_collected(item_indx);
																	Settings::on_item_received(itm, collected_item(item_indx));
																}
															}
														} while(ref->next_indx());
														delete itm;
													}
												}
												break;
											}
											case "LocationInfo":
											{
												if(ref->sub_find({NULL,{"locations"}}))
												{
													if(ref->first_indx())
													{
														NetworkItem itm = new NetworkItem();
														do
														{
															itm->from(ref);
															if(itm->valid)
															{
																cache_location_info(itm);
																Settings::on_location_scouts(itm);
															}
														} while(ref->next_indx());
														delete itm;
													}
												}
												if(loc_cached_count == num_locs)
												{
													on_data_loaded();
													status = STATUS_DATA_LOADED;
													if(end_cond == APH_END_DATA)
														do_exit = true;
												}
												break;
											}
											case "RoomUpdate":
											{
												ref->print();
												Settings::on_room_update(ref);
												unless(sock)
													break;
												if(ref->find({{q},{"checked_locations"}}))
													if(ref->first_indx())
														do
														{
															int id = id_to_index(ref->get_long());
															mark_and_remove_loc(id, true);
														} while(ref->next_indx());
												break;
											}
											case "Bounced":
											{
												Settings::on_bounced(ref);
												ref->from(parent_ref);
												if(ref->find({{q},{"tags"}}))
												{
													if(ref->first_indx())
														do
														{
															char32 buf[1];
															ref->get_trim(buf);
															unless(strcmp(buf,"DeathLink"))
															{
																char32 sbuf[1];
																char32 cbuf[1];
																if(ref->find({{q},{"data","source"}}))
																	ref->get_trim(sbuf);
																if(ref->find({{q},{"data","cause"}}))
																	ref->get_trim(cbuf);
																DeathLink::death_recv(sbuf,cbuf);
																break;
															}
														} while(ref->next_indx());
												}
												break;
											}
											case "Retrieved":
											{
												Settings::on_retrieved(ref);
												break;
											}
											case "SetReply":
											{
												Settings::on_set_reply(ref);
												break;
											}
											case "InvalidPacket":
												printf("[ERR]: %s\n", msg);
												break;
											case "DataPackage":
												if(ref->sub_find({NULL,{"data","games"}}))
												{
													char32 namebuf[1];
													if(ref->first_kv())
														do
														{
															ref->get_kv(namebuf,NULL);
															ref2->from(parent_ref);
															ref2->sub_find({NULL,{"data","games",namebuf}});
															process_datapack(namebuf, ref2);
														} while(ref->next_kv());
													unless(request_new_datapacks())
														request_location_info();
												}
												
												break;
											default:
												printf("[???]: %s\n", msg);
												break;
										}
										unless(sock)
											break;
										if(strlen(response) > 4)
										{
											if(AP_LOG_COMMUNICATION > 1)
												printf("[SEND] %s\n", response);
											sock->Send(response);
										}
									} while(++q && parent_ref->next_indx());

								delete parent_ref;
								delete ref;
								delete ref2;
								delete resp;
								break;
							}
							default:
								printf("[RECV UNKNOWN]: '%ad'\n", msg);
								break;
						}
					}
					Waitframe();
				}
				if(end_cond != APH_END_NEVER && !sock)
					break;
			}
		}
	}

	void _do_connect()
	{
		if(int scr = CheckGenericScript("APConnect"))
			RunGenericScriptFrz(scr);
		else connect_socket();
	}

	void ap_setup()
	{
		unless(did_setup)
			ap_uid = RandGen->LRand();
		did_setup = true;
	}

	bool ap_connect(char32 _ip, char32 _port, char32 _slot, char32 _pwd, char32 _death_alias = NULL)
	{
		disconnect_socket();
		sprintf(ip,"%s",_ip[0] ? _ip : "archipelago.gg");
		sprintf(port,"%s",_port[0] ? _port : "38281");
		sprintf(slot,"%s",_slot);
		sprintf(pwd,"%s",_pwd);
		sprintf(death_alias,"%s",_death_alias ? _death_alias : slot);
		_do_connect();
		unless(sock)
			return false;
		if(int scr = CheckGenericScript("APHandler"))
			RunGenericScript(scr, {false});
		return true;
	}

	char32 file_read_cache[MAX_INT];
	char32 datapack_cache[1];
	void check_datapack_checksum(char32 key, char32 val)
	{
		unless(datapack_cache[0])
		{
			ResizeArray(datapack_cache,1);
			file cache;
			if(cache->Open("APCache.txt"))
			{
				cache->ReadString(file_read_cache);
				cache->Close();
				sprintf(datapack_cache, "%s", file_read_cache);
				file_read_cache[0] = 0;
			}
			else sprintf(datapack_cache, "{}");
			cache->Free();
		}
		JSONRef ref = new JSONRef(datapack_cache);
		bool do_update = true;
		char32 buf[1];
		if(ref->find({NULL,{key}}))
		{
			ref->get_trim(buf);
			unless(strcmp(val,buf)) //matching checksum
				do_update = false;
		}
		if(do_update)
			ref->add_key(key,NULL,true);
		delete ref;
	}
	void check_datapack_checksums(JSONRef ref)
	{
		datapack_cache[0] = 0;
		char32 keybuf[1], valbuf[1];
		if(ref->first_kv())
			do
			{
				ref->get_kv(keybuf, valbuf, true);
				check_datapack_checksum(keybuf, valbuf);
			} while(ref->next_kv())
	}
	bool request_new_datapacks()
	{
		bool ret = false;
		JSONRef ref = new JSONRef(datapack_cache);
		char32 request[1];
		char32 keybuf[1], valbuf[1];
		if(ref->first_kv())
			do
			{
				ref->get_kv(keybuf, valbuf, true);
				if(valbuf[0])
					continue;
				sprintf(request, "[{\"cmd\":\"GetDataPackage\",\"games\":[\"%s\"]}]",keybuf);
				sock->Send(request);
				ret = true;
				break; //just one at a time! This should be called again from the handler for each datapack
			} while(ref->next_kv());
		delete ref;
		unless(ret)
		{
			file cache;
			if(cache->Create("APCache.txt"))
			{
				cache->WriteString(datapack_cache);
				cache->Close();
			}
			cache->Free();
		}
		return ret;
	}
	void process_datapack(char32 name, JSONRef datapack_ref)
	{
		char32 out_json[] = "{}";
		JSONRef out = new JSONRef(out_json);
		JSONRef cache = new JSONRef(datapack_cache);
		char32 kbuf[1], vbuf[1];
		if(datapack_ref->first_kv())
			do
			{
				datapack_ref->get_kv(kbuf, vbuf, false);
				switch(kbuf)
				{
					case "item_name_to_id":
					case "location_name_to_id":
						out->add_key(kbuf,vbuf);
						break;
					case "checksum":
						out->add_key(kbuf,vbuf);
						cache->add_key(name, vbuf, true);
						break;
				}
			} while(datapack_ref->next_kv());
		delete cache;
		delete out;

		char32 fname[1];
		sprintf(fname, "%s.json", name);
		file f;
		unless(f->Create(fname))
		{
			f->Free();
			return;
		}
		f->WriteString(out_json);
		f->Free();
	}
	int loc_cached_count;
	bool request_location_info()
	{
		unless(location_infos[0])
		loc_cached_count = 0;
		int locs[0];
		ResizeArray(locs,num_locs);
		for(int q = 0; q < num_locs; ++q)
			locs[q] = q;
		Archipelago::send_location_scouts_arr(0,locs);
		return true;
	}
	void fetch_item_names(NetworkItem itm, bool for_local)
	{
		NetworkPlayer plr = players[itm->player_id-1];
		NetworkSlot slot = slots[plr->slot_id-1];
		NetworkSlot slot2 = slots[ap_player_id-1];

		NetworkSlot item_slot = for_local ? slot2 : slot;
		NetworkSlot loc_slot = for_local ? slot : slot2;

		char32 cache_buf[1], kbuf[1], vbuf[1];
		load_cache_buf(cache_buf, item_slot->game);
		JSONRef cache = new JSONRef(cache_buf);
		if(cache->sub_find({NULL,{"item_name_to_id"}}))
		{
			if(cache->first_kv())
				do
				{
					cache->get_kv(kbuf,vbuf);
					unless(strcmp(itm->item_id,vbuf))
					{
						sprintf(itm->item_name,"%s",kbuf);
						break;
					}
				} while(cache->next_kv())
		}

		cache_buf[0] = 0;
		load_cache_buf(cache_buf, loc_slot->game);
		cache->from(cache_buf);
		if(cache->sub_find({NULL,{"location_name_to_id"}}))
		{
			if(cache->first_kv())
				do
				{
					cache->get_kv(kbuf,vbuf);
					unless(strcmp(itm->location_id,vbuf))
					{
						sprintf(itm->location_name,"%s",kbuf);
						break;
					}
				} while(cache->next_kv())
		}

		delete cache;
	}
	void cache_location_info(NetworkItem itm)
	{
		unless(itm->valid)
			return;
		++loc_cached_count;
		fetch_item_names(itm,false);

		int indx = itm->localize_location_id();
		if(indx >= SizeOfArray(location_infos))
			ResizeArray(location_infos, indx+1);
		if(location_infos[indx])
			delete location_infos[indx];
		location_infos[indx] = itm->copy();
		GlobalObject(location_infos[indx]);
	}
	void load_cache_buf(char32 buf, char32 game)
	{
		char32 fname[1];
		sprintf(fname, "%s.json", game);
		file f;
		unless(f->Open(fname))
		{
			f->Free();
			return;
		}
		f->ReadString(file_read_cache);
		sprintf(buf,"%s",file_read_cache);
		file_read_cache[0] = 0;
		f->Free();
	}

	void mark_and_remove_loc(int indx, bool do_recv_itm = false)
	{
		if(do_recv_itm && !checked_location(indx))
		{
			if(auto itm = location_infos[indx])
			{
				if(itm->player_id == ap_player_id)
				{
					int item_indx = itm->localize_item_id();
					mark_item_collected(item_indx);
					Settings::on_item_received(itm, collected_item(item_indx));
				}
			}
		}
		mark_location_checked(indx);
		Settings::do_remove_location(indx);
	}

	void send_sync()
	{
		unless(socket_valid()) return;
		char32 msg[] = "[{\"cmd\":\"Sync\"}]";
		if(AP_LOG_COMMUNICATION > 1)
			printf("[SEND] %s\n", msg);
		sock->Send(msg);
	}

	void send_location_checks_arr(int locations)
	{
		unless(socket_valid()) return;
		unless(SizeOfArray(locations)) return;
		char32 msg[] = "[{\"cmd\":\"LocationChecks\",\"locations\":[]}]";
		JSONRef ref = new JSONRef(msg);
		ref->find({{0},{"locations"}});
		for(loc : locations)
			ref->add_indx_long(index_to_id(loc));
		if(AP_LOG_COMMUNICATION > 1)
			printf("[SEND] %s\n", msg);
		sock->Send(msg);
		delete ref;
	}
	void send_location_checks(...int[] locations)
	{
		send_location_checks_arr(locations);
	}

	void send_location_scouts_arr(int hint_mode, int locations)
	{
		unless(socket_valid()) return;
		int sz = SizeOfArray(locations);
		DEFINE MAX_PER_PACKET = 75; //limits the size of return packets, to prevent going over MAX_INT characters
		char32 msg[1];
		JSONRef ref = new JSONRef(msg);
		for(int packet = 0; packet < Ceiling(sz/MAX_PER_PACKET); ++packet)
		{
			sprintf(msg, "[{\"cmd\":\"LocationScouts\",\"locations\":[],\"create_as_hint\":%d}]",hint_mode);
			ref->find({{0},{"locations"}});
			for(int q = (packet*MAX_PER_PACKET); q < Min(sz,(packet+1)*MAX_PER_PACKET); ++q)
				ref->add_indx_long(index_to_id(locations[q]));
			if(AP_LOG_COMMUNICATION > 1)
				printf("[SEND] %s\n", msg);
			sock->Send(msg);
		}
		delete ref;
	}
	void send_location_scouts(int hint_mode, ...int[] locations)
	{
		send_location_scouts_arr(hint_mode, locations);
	}

	void send_status_update(ClientStatus status)
	{
		unless(socket_valid()) return;
		char32 msg[0];
		sprintf(msg, "[{\"cmd\":\"StatusUpdate\",\"status\":%d}]",status);
		if(AP_LOG_COMMUNICATION > 1)
			printf("[SEND] %s\n", msg);
		sock->Send(msg);
	}

	void send_say(char32 msg)
	{
		unless(socket_valid()) return;
		char32 msg[0];
		sprintf(msg, "[{\"cmd\":\"Say\",\"text\":%s}]",msg);
		if(AP_LOG_COMMUNICATION > 1)
			printf("[SEND] %s\n", msg);
		sock->Send(msg);
	}
}
